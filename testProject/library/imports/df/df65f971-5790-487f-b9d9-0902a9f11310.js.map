{"version":3,"sources":["../../../../assets/Scripts/assets/Scripts/FbInstantGames.js"],"names":["cc","Class","extends","Component","properties","testText","Label","shareUrl","String","tSprite","Node","start","shareGame","active","FBInstant","shareAsync","intent","image","getImgBase64","text","data","myReplayData","then","string","console","log","sendRequest","catch","playMessage","updateAsync","action","cta","default","player","getName","localizations","en_US","pt_BR","id_ID","fr_CA","vi_VN","th_TH","tr_TR","de_DE","es_ES","ar_AE","ja_JP","template","strategy","notification","createShortCut","canCreateShortcutAsync","canCreateShortcut","createShortcutAsync","PlayWithFriends","context","chooseAsync","e","onBuyBot","subscribeBotAsync","target","find","width","height","renderTexture","RenderTexture","begin","_sgNode","visit","end","canvas","document","createElement","ctx","getContext","_renderType","game","RENDER_TYPE_CANVAS","texture","getSprite","getTexture","getHtmlElementObj","drawImage","RENDER_TYPE_WEBGL","buffer","gl","createFramebuffer","bindFramebuffer","FRAMEBUFFER","_glID","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","Uint8Array","readPixels","RGBA","UNSIGNED_BYTE","rowBytes","row","srow","data2","Uint8ClampedArray","imageData","ImageData","putImageData","toDataURL"],"mappings":"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","file":"FbInstantGames.js","sourceRoot":"../../../../assets/Scripts","sourcesContent":["\n//\n//      各関数のimage要素を指定した画像にしたい場合、あらかじめBase64に変換した文字列型を入力してください。ただ、すごく長いです。\n//      画像が小さすぎると最低ラインまで引き伸ばして表示されるので注意。200px未満は若干ぼやけるようです。\n//      48:25の画像だとスマホでジャストのサイズになります。(PC版だとフルで表示されます)720x375が理想サイズ。\n//      スクショでいいならgetImgBase64()を読んだだけで大丈夫です。\n//\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        testText: cc.Label,\n        shareUrl: String,\n        tSprite: cc.Node,\n    },\n\n    // onLoad () {},\n\n    start() {\n    },\n\n    //シェア機能。現状はタイムライン投稿しようとするとtextメッセージが消えてしまう。\n    shareGame() {\n\n        this.tSprite.active = true;\n\n        if (typeof FBInstant == 'undefined')\n            return;\n\n        FBInstant.shareAsync({\n            intent: 'SHARE',    //何をするのか\n            image: this.getImgBase64(),\n            text: 'Great!',\n            data: { myReplayData: '...' },\n        }).then(() => {\n            // continue with the game.\n            this.testText.string = '共有完了';\n            console.log('共有完了');\n        });\n        this.tSprite.active = false;\n\n    },\n\n    //アプリへの招待\n    sendRequest() {\n\n        if (typeof FBInstant == 'undefined')\n            return;\n\n        FBInstant.shareAsync({\n            intent: 'CUSTOM',\n            image: this.getImgBase64(),\n            text: '',\n            data: { myReplayData: '...' },\n        }).then(function () {\n            this.testText.string = 'Message was sent successfully';\n            console.log('Message was sent successfully');\n        }).catch(function () {\n            this.testText.string = '';\n            console.log('failed!');\n        });\n\n    },\n\n    //友達とのチャット画面でゲームを始めた時にだけ呼ばれる。「〇〇さんが今プレイしました。次はあなたの番です」←これ\n    playMessage() {\n\n        if (typeof FBInstant == 'undefined')\n            return;\n\n        FBInstant.updateAsync({\n            action: 'CUSTOM',\n            cta: 'Play',\n            // image: this.getImgBase64(),\n            image: this.getImgBase64(),\n\n            //言語別で表示するメッセージを変える。言語コードについては→　　https://so-zou.jp/web-app/tech/data/code/language.htm\n\n            text:\n            {\n                default: FBInstant.player.getName() + \"just played. It's your turn!\",\n                localizations: {\n                    //派生言語は別に追加する必要あり。\n                    en_US: '',                                                                  //英語(アメリカ)\n                    pt_BR: '',                                                                  //ポルトガル語(ブラジル)\n                    id_ID: '',                                                                  //インドネシア語(インドネシア)\n                    fr_CA: '',                                                                  //フランス語(フランス)\n                    vi_VN: '',                                                                  //ベトナム語(ベトナム)\n                    th_TH: '',                                                                  //タイ語(タイ)\n                    tr_TR: '',                                                                  //トルコ語(トルコ)\n                    de_DE: '',                                                                  //ドイツ語(ドイツ)\n                    es_ES: '',                                                                  //スペイン語(スペイン)\n                    ar_AE: '',                                                                  //アラビア語(アメリカ)\n\n                    ja_JP: FBInstant.player.getName() + 'さんが今プレイしました。あなたの番です！',     //日本語(日本)\n                }\n            },\n            template: 'WORD_PLAYED',\n            data: { myReplayData: '...' },\n            strategy: 'IMMEDIATE',\n            notification: 'NO_PUSH',\n        }).then(function () {\n            console.log('Message was sent successfully');\n            this.testText.string = 'Message was sent successfully';\n        }).catch(function () {\n            console.log('failed!');\n            this.testText.string = 'failed';\n        });\n\n    },\n\n    //ショートカット作成(Androidのみ対応)\n    createShortCut() {\n        if (typeof FBInstant == 'undefined')\n            return;\n\n        FBInstant.canCreateShortcutAsync()\n            .then(function (canCreateShortcut) {\n                if (canCreateShortcut) {\n                    FBInstant.createShortcutAsync()\n                        .then(function () {\n                            // Shortcut created\n                            this.testText.string = 'ショートカット作成';\n                        })\n                        .catch(function () {\n                            // Shortcut not created\n                            this.testText.string = 'ショートカット作成失敗';\n                        });\n                }\n            });\n    },\n\n    //友達を選択して一緒に遊ぶ。ゲームを終了しないで処理が行える。\n    PlayWithFriends() {\n\n        if (typeof FBInstant == 'undefined')\n            return;\n\n        FBInstant.context.chooseAsync().then(function (e) {\n\n            this.testText.string = \"FBInstant.context.chooseAsync complete\";\n            console.log(\"FBInstant.context.chooseAsync complete\");\n            console.log(e);\n        });\n    },\n\n    //Botサイト登録。\n    onBuyBot() {\n        FBInstant.player.subscribeBotAsync().then({\n            // Player is subscribed to the bot\n        }).then(function (e) {\n            console.log('Bot購読済み');\n            this.testText.string = 'Bot購読済み';\n        }).catch(function (e) {\n            // Handle subscription failure\n            this.testText.string = 'Bot未購読';\n        });\n    },\n\n    //呼ばれたタイミングでスクショを撮る。シェアなどのimageにはここの戻り値を入れればいいかも\n    getImgBase64() {\n        let target = cc.find('Canvas');\n        let width = 720, height = 375;\n        let renderTexture = new cc.RenderTexture(width, height);\n        renderTexture.begin();\n        target._sgNode.visit();\n        renderTexture.end();\n        let canvas = document.createElement('canvas');      //HTML要素生成。\n        let ctx = canvas.getContext('2d');\n        canvas.width = width;\n        canvas.height = height;                             //縦横幅設定\n        if (cc._renderType === cc.game.RENDER_TYPE_CANVAS) {\n            let texture = renderTexture.getSprite().getTexture();\n            let image = texture.getHtmlElementObj();\n            ctx.drawImage(image, width / 2, height / 2);\n        }\n        //基本的にWebGLらしい。ビルド設定からWebGL優先に設定しているため。\n        else if (cc._renderType === cc.game.RENDER_TYPE_WEBGL) {\n            let buffer = gl.createFramebuffer();                                                        //フレームバッファ生成\n            gl.bindFramebuffer(gl.FRAMEBUFFER, buffer);                                                 //フレームバッファをWebGLにバインド\n            let texture = renderTexture.getSprite().getTexture()._glID;\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);   //フレームバッファへのテクスチャの紐付け\n            let data = new Uint8Array(width * height * 4);\n            gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data);                        //←第1,2引数を弄るとオフセットがずれるが、ずれた分は表示されない(真っ白)\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);                                                   //フレームバッファをWebGLにバインド\n            let rowBytes = width * 4;\n            //プリンタみたいに1行(px)ずつデータ書き込み。\n            for (let row = 0; row < height; row++) {\n                let srow = height - 1 - row;            //描画する高さ設定。上から順に。\n                let data2 = new Uint8ClampedArray(data.buffer, srow * width * 4, rowBytes);\n                let imageData = new ImageData(data2, width, 1);     //ピクセルデータ設定。\n                ctx.putImageData(imageData, 0, row);            //Canvasに指定のImageDataオブジェクトのデータを描画。\n            }\n        }\n        return canvas.toDataURL('image/png');\n    },\n\n    // update (dt) {},\n});\n"]}